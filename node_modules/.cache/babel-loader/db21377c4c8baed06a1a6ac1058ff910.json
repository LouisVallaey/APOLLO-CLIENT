{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louisvallaey/apollo-client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_CUSTOMERS } from \"./graphql/queries\";\nimport { ADD_CUSTOMER } from \"./graphql/mutations\";\nimport CustomerItem from \"./components/customeritem\";\nimport styled from \"styled-components\";\nimport React, { useEffect } from \"react\";\nimport CSVReader from \"react-csv-reader\";\nconst CustomerTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 40px auto 0px auto;\n  border: 1px solid black;\n`;\n_c = CustomerTable;\n\nfunction App() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_CUSTOMERS);\n  const [addCustomer] = useMutation(ADD_CUSTOMER);\n  let arraynew = [{\n    firstName: \"Inge\",\n    lastName: \"Vallaey\",\n    email: \"eline.vallaey@gmail.com\"\n  }, {\n    firstName: \"Louis\",\n    lastName: \"Vallaey\",\n    email: \"louis.vallaey@gmail.com\"\n  }];\n  const parseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: header => header.replace(/\\W/g, \"_\")\n  };\n\n  const handleCSV = (data, fileInfo) => {\n    console.log(data);\n    addCustomer({\n      variables: {\n        newcustomers: data\n      }\n    });\n  };\n\n  useEffect(() => {\n    addCustomer({\n      variables: {\n        newcustomers: arraynew\n      }\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CSVReader, {\n      cssClass: \"csv-reader-input\",\n      label: \"Select CSV with secret Death Star statistics\",\n      onFileLoaded: handleCSV,\n      parserOptions: parseOptions,\n      inputId: \"csvId\",\n      inputStyle: {\n        color: \"black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomerTable, {\n      children: data.customers.map(({\n        id,\n        firstName,\n        lastName,\n        email,\n        customerSince\n      }) => /*#__PURE__*/_jsxDEV(CustomerItem, {\n        id: id,\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        customerSince: customerSince\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"zGMzZmVA6rPJnxWvECyqRKWhSkI=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomerTable\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/louisvallaey/apollo-client/src/App.js"],"names":["useQuery","useMutation","GET_CUSTOMERS","ADD_CUSTOMER","CustomerItem","styled","React","useEffect","CSVReader","CustomerTable","div","App","loading","error","data","addCustomer","arraynew","firstName","lastName","email","parseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","handleCSV","fileInfo","console","log","variables","newcustomers","color","customers","map","id","customerSince"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_CUSTOMERS } from \"./graphql/queries\";\nimport { ADD_CUSTOMER } from \"./graphql/mutations\";\nimport CustomerItem from \"./components/customeritem\";\nimport styled from \"styled-components\";\nimport React, { useEffect } from \"react\";\nimport CSVReader from \"react-csv-reader\";\n\nconst CustomerTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 40px auto 0px auto;\n  border: 1px solid black;\n`;\n\nfunction App() {\n  const { loading, error, data } = useQuery(GET_CUSTOMERS);\n  const [addCustomer] = useMutation(ADD_CUSTOMER);\n  let arraynew = [\n    {\n      firstName: \"Inge\",\n      lastName: \"Vallaey\",\n      email: \"eline.vallaey@gmail.com\",\n    },\n    {\n      firstName: \"Louis\",\n      lastName: \"Vallaey\",\n      email: \"louis.vallaey@gmail.com\",\n    },\n  ];\n  const parseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => header.replace(/\\W/g, \"_\"),\n  };\n  const handleCSV = (data, fileInfo) => {\n    console.log(data);\n    addCustomer({ variables: { newcustomers: data } });\n  };\n\n  useEffect(() => {\n    addCustomer({ variables: { newcustomers: arraynew } });\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  return (\n    <>\n      <CSVReader\n        cssClass=\"csv-reader-input\"\n        label=\"Select CSV with secret Death Star statistics\"\n        onFileLoaded={handleCSV}\n        parserOptions={parseOptions}\n        inputId=\"csvId\"\n        inputStyle={{ color: \"black\" }}\n      />\n      <CustomerTable>\n        {data.customers.map(\n          ({ id, firstName, lastName, email, customerSince }) => (\n            <CustomerItem\n              key={id}\n              id={id}\n              firstName={firstName}\n              lastName={lastName}\n              email={email}\n              customerSince={customerSince}\n            ></CustomerItem>\n          )\n        )}\n      </CustomerTable>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}