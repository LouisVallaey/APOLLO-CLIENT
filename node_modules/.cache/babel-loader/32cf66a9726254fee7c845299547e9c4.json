{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louisvallaey/apollo-client/src/pages/CustomerPage.js\",\n    _s = $RefreshSig$();\n\nimport \"../App.css\";\nimport React, { useState } from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { GET_CUSTOMER } from \"../graphql/queries\";\nimport { useLocation } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { Formik, Field, Form } from \"formik\";\n\nfunction CustomerPage() {\n  _s();\n\n  const location = useLocation();\n  const id = location.state.params;\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_CUSTOMER, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.customer.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.customer.firstName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.customer.lastName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.customer.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.customer.customerSince\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        firstName: data.customer.firstName,\n        lastName: data.customer.lastName,\n        email: data.customer.email\n      },\n      onSubmit: async values => {\n        await new Promise(r => setTimeout(r, 500));\n        alert(JSON.stringify(values, null, 2));\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"firstName\",\n          children: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"firstName\",\n          name: \"firstName\",\n          placeholder: \"Jane\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lastName\",\n          children: \"Last Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"lastName\",\n          name: \"lastName\",\n          placeholder: \"Doe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"email\",\n          name: \"email\",\n          placeholder: \"jane@acme.com\",\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CustomerPage, \"RjLDNULw6gH50lBcNuWqvfyqkD8=\", false, function () {\n  return [useLocation, useQuery];\n});\n\n_c = CustomerPage;\nexport default CustomerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerPage\");","map":{"version":3,"sources":["/Users/louisvallaey/apollo-client/src/pages/CustomerPage.js"],"names":["React","useState","GET_CUSTOMER","useLocation","useQuery","Formik","Field","Form","CustomerPage","location","id","state","params","loading","error","data","refetch","variables","customer","firstName","lastName","email","customerSince","values","Promise","r","setTimeout","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import \"../App.css\";\nimport React, { useState } from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { GET_CUSTOMER } from \"../graphql/queries\";\nimport { useLocation } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { Formik, Field, Form } from \"formik\";\nfunction CustomerPage() {\n  const location = useLocation();\n  const id = location.state.params;\n  const { loading, error, data, refetch } = useQuery(GET_CUSTOMER, {\n    variables: { id },\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  return (\n    <>\n      <p>{data.customer.id}</p>\n      <p>{data.customer.firstName}</p>\n      <p>{data.customer.lastName}</p>\n      <p>{data.customer.email}</p>\n      <p>{data.customer.customerSince}</p>\n\n      <Formik\n        initialValues={{\n          firstName: data.customer.firstName,\n          lastName: data.customer.lastName,\n          email: data.customer.email,\n        }}\n        onSubmit={async (values) => {\n          await new Promise((r) => setTimeout(r, 500));\n          alert(JSON.stringify(values, null, 2));\n        }}\n      >\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field id=\"firstName\" name=\"firstName\" placeholder=\"Jane\" />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <Field id=\"lastName\" name=\"lastName\" placeholder=\"Doe\" />\n\n          <label htmlFor=\"email\">Email</label>\n          <Field\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"jane@acme.com\"\n            type=\"email\"\n          />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n    </>\n  );\n}\n\nexport default CustomerPage;\n"]},"metadata":{},"sourceType":"module"}